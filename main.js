(()=>{"use strict";var e={365:(e,t,n)=>{n.d(t,{A:()=>c});var r=n(354),o=n.n(r),i=n(314),a=n.n(i)()(o());a.push([e.id,'body, html {\n    margin: 0;\n    padding: 0;\n    font-family: "Roboto";\n}\n\n.container {\n    display: flex;\n    height: 100vh;\n    width: 100vw;\n}\n.sidebar {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    width: 20%;\n    background-color: antiquewhite;\n}\n.one {\n    display: flex;\n    justify-content: space-between;\n}\n.number {\n    \n    margin-right: 1rem;\n    display:block;\n}\n.hover {\n    margin-right: .8rem;\n    display:none;\n    width: 1rem;\n    height: 1rem;\n    background-color: blueviolet;\n}\n.project {\n    width: 100%;\n    position: relative;\n}\n.project:hover .hover {\n    display:block;\n}\n.project:hover .number {\n    display: none;\n}\n.popup {\n    display: none;\n    position: absolute;\n    left: 15rem;\n    bottom: 1rem;\n    width: 100px;\n    height: 50px;\n    background-color: pink;\n    z-index: 1000;\n}\n.projectButton {\n    width: 100%;\n}\n.onetwo {\n    display: flex;\n    flex-direction: column;\n}\n.title {\n    font-size: 30px;\n}\n\n.mainpage {\n    display: flex;\n    justify-content: center;\n    height: 100%;\n    width: 80%;\n    background-color: aquamarine;\n}\n\n.mainpagecontainer {\n    display:flex;\n    flex-direction: column;\n    width: 50%;\n    height: 100%;\n    background-color: cadetblue;\n}\n.formContainer {\n    width: 100%;\n    height: 20%;\n}\n.taskform {\n    height: 100%;\n    width: 100%;\n    background-color: chocolate;\n}\n.button {\n    height: 1rem;\n    width: 6rem;\n    background-color: aqua;\n}\n.line {\n    width: 100%;\n    height: 1px;\n    background-color: white;\n\n}\n.task {\n    display: flex;\n    width: 100%;\n}\n.markdone {\n    height: 20px;\n    width: 20px;\n    border-radius: 50%;\n    background-color: aqua;\n}\n.things {\n    display: flex;\n    flex-direction: column;\n    height: 4rem;\n    width: 100%;\n    background-color:blanchedalmond;\n}\n',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,YAAY;AAChB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,UAAU;IACV,8BAA8B;AAClC;AACA;IACI,aAAa;IACb,8BAA8B;AAClC;AACA;;IAEI,kBAAkB;IAClB,aAAa;AACjB;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,WAAW;IACX,YAAY;IACZ,4BAA4B;AAChC;AACA;IACI,WAAW;IACX,kBAAkB;AACtB;AACA;IACI,aAAa;AACjB;AACA;IACI,aAAa;AACjB;AACA;IACI,aAAa;IACb,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,sBAAsB;IACtB,aAAa;AACjB;AACA;IACI,WAAW;AACf;AACA;IACI,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,YAAY;IACZ,UAAU;IACV,4BAA4B;AAChC;;AAEA;IACI,YAAY;IACZ,sBAAsB;IACtB,UAAU;IACV,YAAY;IACZ,2BAA2B;AAC/B;AACA;IACI,WAAW;IACX,WAAW;AACf;AACA;IACI,YAAY;IACZ,WAAW;IACX,2BAA2B;AAC/B;AACA;IACI,YAAY;IACZ,WAAW;IACX,sBAAsB;AAC1B;AACA;IACI,WAAW;IACX,WAAW;IACX,uBAAuB;;AAE3B;AACA;IACI,aAAa;IACb,WAAW;AACf;AACA;IACI,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,sBAAsB;AAC1B;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,WAAW;IACX,+BAA+B;AACnC",sourcesContent:['body, html {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: "Roboto";\r\n}\r\n\r\n.container {\r\n    display: flex;\r\n    height: 100vh;\r\n    width: 100vw;\r\n}\r\n.sidebar {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    width: 20%;\r\n    background-color: antiquewhite;\r\n}\r\n.one {\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n.number {\r\n    \r\n    margin-right: 1rem;\r\n    display:block;\r\n}\r\n.hover {\r\n    margin-right: .8rem;\r\n    display:none;\r\n    width: 1rem;\r\n    height: 1rem;\r\n    background-color: blueviolet;\r\n}\r\n.project {\r\n    width: 100%;\r\n    position: relative;\r\n}\r\n.project:hover .hover {\r\n    display:block;\r\n}\r\n.project:hover .number {\r\n    display: none;\r\n}\r\n.popup {\r\n    display: none;\r\n    position: absolute;\r\n    left: 15rem;\r\n    bottom: 1rem;\r\n    width: 100px;\r\n    height: 50px;\r\n    background-color: pink;\r\n    z-index: 1000;\r\n}\r\n.projectButton {\r\n    width: 100%;\r\n}\r\n.onetwo {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.title {\r\n    font-size: 30px;\r\n}\r\n\r\n.mainpage {\r\n    display: flex;\r\n    justify-content: center;\r\n    height: 100%;\r\n    width: 80%;\r\n    background-color: aquamarine;\r\n}\r\n\r\n.mainpagecontainer {\r\n    display:flex;\r\n    flex-direction: column;\r\n    width: 50%;\r\n    height: 100%;\r\n    background-color: cadetblue;\r\n}\r\n.formContainer {\r\n    width: 100%;\r\n    height: 20%;\r\n}\r\n.taskform {\r\n    height: 100%;\r\n    width: 100%;\r\n    background-color: chocolate;\r\n}\r\n.button {\r\n    height: 1rem;\r\n    width: 6rem;\r\n    background-color: aqua;\r\n}\r\n.line {\r\n    width: 100%;\r\n    height: 1px;\r\n    background-color: white;\r\n\r\n}\r\n.task {\r\n    display: flex;\r\n    width: 100%;\r\n}\r\n.markdone {\r\n    height: 20px;\r\n    width: 20px;\r\n    border-radius: 50%;\r\n    background-color: aqua;\r\n}\r\n.things {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 4rem;\r\n    width: 100%;\r\n    background-color:blanchedalmond;\r\n}\r\n'],sourceRoot:""}]);const c=a},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(a[l]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);r&&a[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],c=0;c<e.length;c++){var l=e[c],d=r.base?l[0]+r.base:l[0],s=i[d]||0,u="".concat(d," ").concat(s);i[d]=s+1;var A=n(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var m=o(p,r);r.byIndex=c,t.splice(c,0,{identifier:u,updater:m,references:1})}a.push(u)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=n(i[a]);t[c].references--}for(var l=r(e,o),d=0;d<i.length;d++){var s=n(i[d]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=l}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(72),t=n.n(e),r=n(825),o=n.n(r),i=n(659),a=n.n(i),c=n(56),l=n.n(c),d=n(540),s=n.n(d),u=n(113),A=n.n(u),p=n(365),m={};m.styleTagTransform=A(),m.setAttributes=l(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=s(),t()(p.A,m),p.A&&p.A.locals&&p.A.locals;let f=[];function h(e){return function(e,t){return e instanceof Date?new e.constructor(t):new Date(t)}(e,Date.now())}function v(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}function g(e){const t=v(e);return t.setHours(0,0,0,0),t}function y(e){return t=e,n=h(e),+g(t)==+g(n);var t,n}Math.pow(10,8);const C=6e4,b=36e5;function I(e,t){const n=t?.additionalDigits??2,r=function(e){const t={},n=e.split(k.dateTimeDelimiter);let r;if(n.length>2)return t;if(/:/.test(n[0])?r=n[0]:(t.date=n[0],r=n[1],k.timeZoneDelimiter.test(t.date)&&(t.date=e.split(k.timeZoneDelimiter)[0],r=e.substr(t.date.length,e.length))),r){const e=k.timezone.exec(r);e?(t.time=r.replace(e[1],""),t.timezone=e[1]):t.time=r}return t}(e);let o;if(r.date){const e=function(e,t){const n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};const o=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:null===i?o:100*i,restDateString:e.slice((r[1]||r[2]).length)}}(r.date,n);o=function(e,t){if(null===t)return new Date(NaN);const n=e.match(L);if(!n)return new Date(NaN);const r=!!n[4],o=S(n[1]),i=S(n[2])-1,a=S(n[3]),c=S(n[4]),l=S(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,c,l)?function(e,t,n){const r=new Date(0);r.setUTCFullYear(e,0,4);const o=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(t,c,l):new Date(NaN);{const e=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(j[t]||(E(e)?29:28))}(t,i,a)&&function(e,t){return t>=1&&t<=(E(e)?366:365)}(t,o)?(e.setUTCFullYear(t,i,Math.max(o,a)),e):new Date(NaN)}}(e.restDateString,e.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);const i=o.getTime();let a,c=0;if(r.time&&(c=function(e){const t=e.match(B);if(!t)return NaN;const n=x(t[1]),r=x(t[2]),o=x(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,o)?n*b+r*C+1e3*o:NaN}(r.time),isNaN(c)))return new Date(NaN);if(!r.timezone){const e=new Date(i+c),t=new Date(0);return t.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),t.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),t}return a=function(e){if("Z"===e)return 0;const t=e.match(w);if(!t)return 0;const n="+"===t[1]?-1:1,r=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?n*(r*b+o*C):NaN}(r.timezone),isNaN(a)?new Date(NaN):new Date(i+c+a)}const k={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},L=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,B=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,w=/^([+-])(\d{2})(?::?(\d{2}))?$/;function S(e){return e?parseInt(e):1}function x(e){return e&&parseFloat(e.replace(",","."))||0}const j=[31,null,31,30,31,30,31,31,30,31,30,31];function E(e){return e%400==0||e%4==0&&e%100!=0}function q(e,t){return+v(e)<+v(t)}function T(){return Q.filter((e=>y(I(e.dueDate))))}function D(){const e=new Date;return Q.filter((t=>q(I(t.dueDate),e)&&!y(I(t.dueDate))))}let N=!1,M=!1;function Y(){N=!0,M=!1;const e=T(),t=document.querySelector(".taskcontainer");t.innerHTML="",document.querySelector("#projectname").innerHTML="Today",e.forEach((e=>{const n=document.createElement("div");n.classList.add("task"),n.innerHTML=`\n            <div class="markdone"></div>\n            <div class="things">\n                <div class="taskname">${e.title}</div>\n                <div class="description">${e.description}</div>\n                <div class="date">${e.dueDate}</div>\n            </div>\n        `,t.appendChild(n),n.querySelector(".markdone").addEventListener("click",(()=>{return t=e.title,n=e.dueDate,Q=Q.filter((e=>!(e.title===t&&e.dueDate===n))),X(),Y(),W(),U(),K(),void F();var t,n}));var r=document.createElement("div");r.classList.add("line"),t.appendChild(r)}))}function H(){M=!0;const e=D(),t=new Date,n=document.querySelector(".taskcontainer");n.innerHTML="",document.querySelector("#projectname").innerHTML="Overdue",e.forEach((e=>{const r=I(e.dueDate);if(q(r,t)&&!y(r)){const t=document.createElement("div");t.classList.add("task"),t.innerHTML=`\n                <div class="markdone"></div>\n                <div class="things">\n                    <div class="taskname">${e.title}</div>\n                    <div class="description">${e.description}</div>\n                    <div class="date">${e.dueDate}</div>\n                </div>\n            `,n.appendChild(t),t.querySelector(".markdone").addEventListener("click",(()=>function(e,t){for(let n=0;n<Q.length;n++)if(Q[n].title===e&&Q[n].dueDate===t){Q.splice(n,1);break}for(let n=0;n<f.length;n++)for(let r=0;r<f[n].todoList.length;r++)if(f[n].todoList[r].title===e&&f[n].todoList[r].dueDate===t){f[n].todoList.splice(r,1);break}X(),H(),U(),K(),F()}(e.title,e.dueDate)))}}));var r=document.createElement("div");r.classList.add("line"),n.appendChild(r)}function W(){document.querySelector("#todaynumber").innerHTML=T().length}function U(){document.querySelector("#overduenumber").innerHTML=D().length}function X(){localStorage.setItem("projects",JSON.stringify(f)),localStorage.setItem("allTodo",JSON.stringify(Q))}let Z=!0,$=0;function P(){z(),Z=!0,N=!1,M=!1,document.querySelector("#projectname").innerHTML="All Tasks";for(let r=0;r<Q.length;r++){let o,i=!1,a=Q[r].title,c=Q[r].description,l=Q[r].dueDate;null!=Q[r].projectName&&(o=Q[r].projectName,i=!0);let d=document.querySelector(".taskcontainer");var e=document.createElement("div");e.classList.add("task"),e.setAttribute("data-project-index",r),e.innerHTML=`\n            <div class="markdone"></div>\n            <div class="things">\n                <div class="taskname">${a}</div>\n                <div class="description">${c}</div>\n                <div class="date">${l}</div>\n            </div>\n        `,d.appendChild(e);let s=e.querySelector(".things");if(i){var t=document.createElement("div");t.innerHTML=o,t.classList.add("projectName"),s.appendChild(t)}e.querySelector(".markdone").addEventListener("click",(()=>V(a,r)));var n=document.createElement("div");n.classList.add("line"),d.appendChild(n)}}function z(){document.querySelector(".taskcontainer").innerHTML=""}function F(){document.querySelector(".myprojects").innerHTML="";for(let e=0;e<f.length;e++){let t=f[e].todoList.length,n=f[e].name,r=document.querySelector(".myprojects"),o=document.createElement("div");o.classList.add("one"),o.classList.add("project"),o.setAttribute("data-project-index",e),o.innerHTML=`\n            <div class="text">${n}</div>\n            <div class="number">${t}</div>\n            <div class="hover"></div>\n            <div class="popup">\n                <button class="projectButton" id="deleteP">Delete</button>\n                <button class="projectButton" id="renameP">Rename</button>\n            </div>\n        `,r.appendChild(o),O(o.querySelector(".hover"),o.querySelector(".popup")),o.addEventListener("click",(()=>_(e)));const i=o.querySelector("#deleteP"),a=o.querySelector("#renameP");i.addEventListener("click",(()=>R(e))),a.addEventListener("click",(()=>J(e)))}}function O(e,t){e.addEventListener("click",(e=>{e.stopPropagation(),document.querySelectorAll(".popup").forEach((e=>{e.style.display="none"})),t.style.display="block"})),document.addEventListener("click",(n=>{t.contains(n.target)||e.contains(n.target)||(t.style.display="none")}))}function R(e){let t=f.splice(e,1)[0];for(let e=0;e<t.todoList.length;e++){let n=t.todoList[e].title,r=t.name;for(let e=0;e<Q.length;e++)if(n===Q[e].title&&r===Q[e].projectName){Q.splice(e,1);break}}X(),K(),W(),U(),P(),F()}function J(e){const t=prompt("Enter the new project name:");t&&(f[e].name=t,F())}function V(e,t){if(null!=Q[t].projectName){let n=Q[t].projectName;for(let t=0;t<f.length;t++)if(f[t].name===n)for(let n=0;n<f[t].todoList.length;n++)f[t].todoList[n].title===e&&f[t].todoList.splice(n,1)}Q.splice(t,1),X(),K(),W(),U(),P(),F()}function _(e){if(Z=!1,N=!1,e<0||e>=f.length)return;$=e;let t=f[e];z(),document.querySelector("#projectname").innerHTML=t.name;for(let e=0;e<t.todoList.length;e++){let o=t.name,i=t.todoList[e].title,a=t.todoList[e].description,c=t.todoList[e].dueDate,l=document.querySelector(".taskcontainer");var n=document.createElement("div");n.classList.add("task"),n.setAttribute("data-task-index",e),n.innerHTML=`\n            <div class="markdone"></div>\n            <div class="things">\n                <div class="taskname">${i}</div>\n                <div class="description">${a}</div>\n                <div class="date">${c}</div>\n            </div>\n        `,l.appendChild(n),n.querySelector(".things"),n.querySelector(".markdone").addEventListener("click",(()=>G(o,e)));var r=document.createElement("div");r.classList.add("line"),l.appendChild(r)}}function G(e,t){for(let n=0;n<f.length;n++)if(e===f[n].name){let e=f[n].todoList.splice(t,1)[0];for(let t=0;t<Q.length;t++)if(e&&e.title===Q[t].title){Q.splice(t,1);break}_(n)}X(),K(),W(),U(),F()}function K(){document.querySelector("#alltasknumber").innerHTML=Q.length}let Q=[];let ee=!0;function te(){ee=!ee}function ne(){if(ee){var e=document.createElement("form");e.classList.add("taskform"),e.innerHTML='\n        <label for="name"></label>\n        <input type="text" id="name" name="name" placeholder="Task name (required)" required autocomplete="off"><br>\n\n        <label for="date"></label>\n        <input type="date" id="date" name="date" required autocomplete="off"><br>\n\n        <label for="prio"></label>\n        <select name="prio" id="prio" autocomplete="off">\n            <option value="none" selected>No priority</option>\n            <option value="low">Low priority</option>\n            <option value="mid">Medium priority</option>\n            <option value="high">High priority</option>\n        </select><br>\n\n        <label for="projects"></label>\n        <select name="projects" id="projects" autocomplete="off">\n            <option value="saumyazaumya">Tasks</option>\n        </select>\n\n        <label for="descrip"></label>\n        <input type="text" id="descrip" name="descrip" placeholder="Notes (optional)" autocomplete="off" maxlength="20">\n\n        <button type="button" class="button close">Close</button>\n        <button type="submit" class="button submitButton">Submit</button>\n        ',document.querySelector(".onetwo").appendChild(e);for(let e=0;e<f.length;e++){let t=f[e].name,n=document.getElementById("projects"),r=document.createElement("option");r.value=t,r.textContent=t,n.appendChild(r)}te(),document.querySelector(".taskform").addEventListener("submit",(e=>{e.preventDefault();let t=!0,n=null;const r=document.getElementById("name").value,o=document.getElementById("date").value,i=document.getElementById("prio").value;let a=document.getElementById("projects").value;"saumyazaumya"===a&&(a=null);const c=document.getElementById("descrip").value;for(let e=0;e<f.length;e++)if(a===f[e].name){n=f[e];for(let o=0;o<n.todoList.length;o++)r===n.todoList[e].title&&(t=!1);break}for(let e=0;e<Q.length;e++)null===Q[e].projectName&&r===Q[e].title&&(t=!1);if(t){let e=function(e,t,n,r,o){const i={title:e,description:t,dueDate:n,priority:r,complete:!1,projectName:o,markComplete:function(){this.complete=!0},changePriority:function(e){this.priority=e}};for(let e=0;e<f.length;e++)f[e].name===o&&f[e].addTodo(i);return i}(r,c,o,i,a);Q.push(e),X()}document.querySelector(".taskform").reset(),re(),F(),K(),W(),U(),N?Y():M?H():Z?P():_($)}),{once:!0}),document.querySelector(".close").addEventListener("click",re)}}function re(){if(!ee){var e=document.querySelector(".taskform");document.querySelector(".onetwo").removeChild(e),e.innerHTML="",e.classList.remove("taskform"),te()}}let oe=!0;function ie(){oe=!oe}function ae(){if(oe){var e=document.createElement("form");e.classList.add("projectForm"),e.innerHTML='\n        <button type="button" class="closeProject">XXXXXXXXXX</button>\n        <label for="name"></label>\n        <input type="text" id="name" name="name" placeholder="Project name + [Enter]" required autocomplete="off">\n        <button type="submit" style="display:none"></button>\n        ',document.querySelector(".sidebar").appendChild(e),ie(),document.querySelector(".projectForm").addEventListener("submit",(e=>{e.preventDefault();let t=!0;const n=document.getElementById("name").value;for(let e=0;e<f.length;e++)f[e].name===n&&(t=!1);if(t){let e=function(e){const t=[];let n;for(let t=0;t<f.length;t++)if(f[t].name===e)return null;return n=e,{todoList:t,name:n,addTodo:function(e){t.push(e)},removeTodo:function(e){for(let n=0;n<t.length;n++)t[n].name===e&&t.splice(n,1)}}}(n);f.push(e),X()}document.querySelector(".projectForm").reset(),ce(),F()}),{once:!0}),document.querySelector(".closeProject").addEventListener("click",ce)}}function ce(){if(!oe){var e=document.querySelector(".projectForm");document.querySelector(".sidebar").removeChild(e),e.innerHTML="",e.classList.remove("projectForm"),ie()}}document.addEventListener("DOMContentLoaded",(function(){!function(){const e=localStorage.getItem("projects"),t=localStorage.getItem("allTodo");e&&(f=JSON.parse(e)),t&&(Q=JSON.parse(t))}(),document.querySelector(".taskbutton").addEventListener("click",ne),document.querySelector(".create").addEventListener("click",ae),document.querySelector(".alltasks").addEventListener("click",P),document.querySelector(".today").addEventListener("click",Y),document.querySelector(".overdue").addEventListener("click",H),F(),P(),K(),W(),U(),document.getElementById("resetLocalStorage").addEventListener("click",(()=>{localStorage.clear(),f=[],Q=[],F(),P(),K(),W(),U()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,