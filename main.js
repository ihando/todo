(()=>{"use strict";var e={365:(e,n,t)=>{t.d(n,{A:()=>c});var r=t(973),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([e.id,'body, html {\n    margin: 0;\n    padding: 0;\n    font-family: "Roboto";\n    box-sizing: border-box;\n    background-color: #04153E;\n}\n\n.container {\n    display: flex;\n    height: 100vh;\n    width: 100vw;\n}\n.sidebar {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    width: 15%;\n    background-color: #04153E;\n    margin: .6rem;\n}\n.sidebarcontainer {\n    display:flex;\n    flex-direction: column;\n    height: 25%;\n}\n.projectcontainer {\n    display: flex;\n    flex-direction: column;\n    height: 65%;\n}\n.hi {\n    flex: 1;\n}\n.wt {\n    color: white;\n}\n.one {\n    display: flex;\n    justify-content: space-between;\n}\n.text {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n.title {\n    font-weight: 600;\n    margin-top: 1rem;\n    margin-left: 1rem;\n    margin-bottom: 1rem;\n}\n.picflex {\n    display: flex;\n    justify-content: flex-start;\n    height: 100%;\n    margin-left: .7rem;\n}\n.picflex2 {\n    display: flex;\n    justify-content: flex-start;\n    height: 100%;\n    margin-left: .95rem;\n}\n.pic {\n    height: 2rem;\n    width: 2rem;\n}\n.pic2 {\n    height: 1.5rem;\n    width: 1.5rem;\n    margin-right: .6rem;\n}\n.addtask {\n    background-color: #04153E;\n    font-weight: 600;\n    border: 0;\n    font-size: .9rem;\n    height: 100%;\n}\n.projecttitle {\n    font-weight: 600;\n    margin-left: 1.2rem;\n    font-size: .95rem;\n}\n.lt {\n    font-size: .9rem;\n}\n.create {\n    background-color: #04153E;\n    color: white;\n    border: 0;\n    margin-left: .8rem;\n    margin-top: .5rem;\n\n}\n.create:hover {\n    color: orangered;\n}\n.pointer:hover {\n    cursor: pointer;\n}\n.resetLocalStorage {\n    border: none;\n}\n.projectForm {\n    display: flex;\n    margin-top: 1rem;\n}\n.closeProject {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    color: red;\n    border-radius: 50%;\n    border: 1px solid red;\n    background-color: #04153E;\n    height: 1.2rem;\n    width: 1.2rem;\n    margin-left: 1rem;\n    margin-right: .5rem;\n}\n.projectbox {\n    border-radius: 2px; \n    box-shadow: none;\n    border: 1px solid gray;\n    height: 2rem;\n    background-color: #2F333D;\n    width: 13rem;\n    color: #A5ABB8;\n}\n.number {\n    margin-right: 1rem;\n    display:block;\n    color: #8F95A5;\n}\n\n.numberflex {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n.hover {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-right: .8rem;\n    display:none;\n    width: 1.5rem;\n    height: 1.5rem;\n    margin-top:.2rem;\n    background-color:#04153E;\n}\n.myprojects {\n    \n}\n.project {\n    width: 100%;\n    position: relative;\n    height: 1.9rem;\n}\n.project:hover .hover {\n    display:block;\n}\n.project:hover .number {\n    display: none;\n}\n.popup {\n    display: none;\n    position: absolute;\n    left: 17rem;\n    bottom: 1.3rem;\n    width: 100px;\n    height: 40px;\n    background-color: #727887;\n    z-index: 1000;\n}\n.projectButton {\n    width: 100%;\n}\n.onetwo {\n    display: flex;\n    flex-direction: column;\n}\n.title {\n    font-size: 30px;\n}\n.resetflex {\n    height: 2rem;\n    display: flex;\n    justify-content: start;\n}\n#resetLocalStorage {\n    \n}\n.mainpage {\n    display: flex;\n    justify-content: center;\n    height: 100%;\n    width: 85%;\n    background-color: #37476F;\n}\n\n.mainpagecontainer {\n    display:flex;\n    flex-direction: column;\n    width: 50%;\n    height: 100%;\n    background-color: #37476F;\n}\n.formContainer {\n    width: 100%;\n    height: 20%;\n}\n.taskform {\n    height: 100%;\n    width: 100%;\n    background-color: #53689B;\n}\n.button {\n    height: 1.5rem;\n    width: 6rem;\n    background-color: #2D3B5C;\n    border: 0;\n    border-radius: 2px;\n}\n.submitButton {\n    color: white;\n    background-color: orangered;\n}\n.hihi {\n    margin-top: 2rem;\n    margin-bottom: 1rem;\n}\n#projectname {\n    color: white;\n    font-size: 20px;\n}\n.taskbutton {\n    background-color: #37476F;\n    color: white;\n    border: 0;\n}\n.line {\n    width: 100%;\n    height: 1px;\n    background-color: white;\n\n}\n.task {\n    display: flex;\n    width: 100%;\n}\n.markdone {\n    height: 20px;\n    width: 20px;\n    border-radius: 50%;\n    background-color: aqua;\n    margin-top: .5rem;\n\n}\n.things {\n    margin-left: .7rem;\n    display: flex;\n    flex-direction: column;\n    height: 4rem;\n    width: 100%;\n    margin-top: .5rem;\n    margin-bottom: .5rem;\n    background-color:#37476F;\n    color: white;\n}\n',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,qBAAqB;IACrB,sBAAsB;IACtB,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,aAAa;IACb,YAAY;AAChB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,UAAU;IACV,yBAAyB;IACzB,aAAa;AACjB;AACA;IACI,YAAY;IACZ,sBAAsB;IACtB,WAAW;AACf;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,WAAW;AACf;AACA;IACI,OAAO;AACX;AACA;IACI,YAAY;AAChB;AACA;IACI,aAAa;IACb,8BAA8B;AAClC;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;AACA;IACI,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,2BAA2B;IAC3B,YAAY;IACZ,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,2BAA2B;IAC3B,YAAY;IACZ,mBAAmB;AACvB;AACA;IACI,YAAY;IACZ,WAAW;AACf;AACA;IACI,cAAc;IACd,aAAa;IACb,mBAAmB;AACvB;AACA;IACI,yBAAyB;IACzB,gBAAgB;IAChB,SAAS;IACT,gBAAgB;IAChB,YAAY;AAChB;AACA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,iBAAiB;AACrB;AACA;IACI,gBAAgB;AACpB;AACA;IACI,yBAAyB;IACzB,YAAY;IACZ,SAAS;IACT,kBAAkB;IAClB,iBAAiB;;AAErB;AACA;IACI,gBAAgB;AACpB;AACA;IACI,eAAe;AACnB;AACA;IACI,YAAY;AAChB;AACA;IACI,aAAa;IACb,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,UAAU;IACV,kBAAkB;IAClB,qBAAqB;IACrB,yBAAyB;IACzB,cAAc;IACd,aAAa;IACb,iBAAiB;IACjB,mBAAmB;AACvB;AACA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,sBAAsB;IACtB,YAAY;IACZ,yBAAyB;IACzB,YAAY;IACZ,cAAc;AAClB;AACA;IACI,kBAAkB;IAClB,aAAa;IACb,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,YAAY;IACZ,aAAa;IACb,cAAc;IACd,gBAAgB;IAChB,wBAAwB;AAC5B;AACA;;AAEA;AACA;IACI,WAAW;IACX,kBAAkB;IAClB,cAAc;AAClB;AACA;IACI,aAAa;AACjB;AACA;IACI,aAAa;AACjB;AACA;IACI,aAAa;IACb,kBAAkB;IAClB,WAAW;IACX,cAAc;IACd,YAAY;IACZ,YAAY;IACZ,yBAAyB;IACzB,aAAa;AACjB;AACA;IACI,WAAW;AACf;AACA;IACI,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,eAAe;AACnB;AACA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;AAC1B;AACA;;AAEA;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,YAAY;IACZ,UAAU;IACV,yBAAyB;AAC7B;;AAEA;IACI,YAAY;IACZ,sBAAsB;IACtB,UAAU;IACV,YAAY;IACZ,yBAAyB;AAC7B;AACA;IACI,WAAW;IACX,WAAW;AACf;AACA;IACI,YAAY;IACZ,WAAW;IACX,yBAAyB;AAC7B;AACA;IACI,cAAc;IACd,WAAW;IACX,yBAAyB;IACzB,SAAS;IACT,kBAAkB;AACtB;AACA;IACI,YAAY;IACZ,2BAA2B;AAC/B;AACA;IACI,gBAAgB;IAChB,mBAAmB;AACvB;AACA;IACI,YAAY;IACZ,eAAe;AACnB;AACA;IACI,yBAAyB;IACzB,YAAY;IACZ,SAAS;AACb;AACA;IACI,WAAW;IACX,WAAW;IACX,uBAAuB;;AAE3B;AACA;IACI,aAAa;IACb,WAAW;AACf;AACA;IACI,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,sBAAsB;IACtB,iBAAiB;;AAErB;AACA;IACI,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,WAAW;IACX,iBAAiB;IACjB,oBAAoB;IACpB,wBAAwB;IACxB,YAAY;AAChB",sourcesContent:['body, html {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: "Roboto";\r\n    box-sizing: border-box;\r\n    background-color: #04153E;\r\n}\r\n\r\n.container {\r\n    display: flex;\r\n    height: 100vh;\r\n    width: 100vw;\r\n}\r\n.sidebar {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    width: 15%;\r\n    background-color: #04153E;\r\n    margin: .6rem;\r\n}\r\n.sidebarcontainer {\r\n    display:flex;\r\n    flex-direction: column;\r\n    height: 25%;\r\n}\r\n.projectcontainer {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 65%;\r\n}\r\n.hi {\r\n    flex: 1;\r\n}\r\n.wt {\r\n    color: white;\r\n}\r\n.one {\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n.text {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n}\r\n.title {\r\n    font-weight: 600;\r\n    margin-top: 1rem;\r\n    margin-left: 1rem;\r\n    margin-bottom: 1rem;\r\n}\r\n.picflex {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    height: 100%;\r\n    margin-left: .7rem;\r\n}\r\n.picflex2 {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    height: 100%;\r\n    margin-left: .95rem;\r\n}\r\n.pic {\r\n    height: 2rem;\r\n    width: 2rem;\r\n}\r\n.pic2 {\r\n    height: 1.5rem;\r\n    width: 1.5rem;\r\n    margin-right: .6rem;\r\n}\r\n.addtask {\r\n    background-color: #04153E;\r\n    font-weight: 600;\r\n    border: 0;\r\n    font-size: .9rem;\r\n    height: 100%;\r\n}\r\n.projecttitle {\r\n    font-weight: 600;\r\n    margin-left: 1.2rem;\r\n    font-size: .95rem;\r\n}\r\n.lt {\r\n    font-size: .9rem;\r\n}\r\n.create {\r\n    background-color: #04153E;\r\n    color: white;\r\n    border: 0;\r\n    margin-left: .8rem;\r\n    margin-top: .5rem;\r\n\r\n}\r\n.create:hover {\r\n    color: orangered;\r\n}\r\n.pointer:hover {\r\n    cursor: pointer;\r\n}\r\n.resetLocalStorage {\r\n    border: none;\r\n}\r\n.projectForm {\r\n    display: flex;\r\n    margin-top: 1rem;\r\n}\r\n.closeProject {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    color: red;\r\n    border-radius: 50%;\r\n    border: 1px solid red;\r\n    background-color: #04153E;\r\n    height: 1.2rem;\r\n    width: 1.2rem;\r\n    margin-left: 1rem;\r\n    margin-right: .5rem;\r\n}\r\n.projectbox {\r\n    border-radius: 2px; \r\n    box-shadow: none;\r\n    border: 1px solid gray;\r\n    height: 2rem;\r\n    background-color: #2F333D;\r\n    width: 13rem;\r\n    color: #A5ABB8;\r\n}\r\n.number {\r\n    margin-right: 1rem;\r\n    display:block;\r\n    color: #8F95A5;\r\n}\r\n\r\n.numberflex {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n}\r\n.hover {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    margin-right: .8rem;\r\n    display:none;\r\n    width: 1.5rem;\r\n    height: 1.5rem;\r\n    margin-top:.2rem;\r\n    background-color:#04153E;\r\n}\r\n.myprojects {\r\n    \r\n}\r\n.project {\r\n    width: 100%;\r\n    position: relative;\r\n    height: 1.9rem;\r\n}\r\n.project:hover .hover {\r\n    display:block;\r\n}\r\n.project:hover .number {\r\n    display: none;\r\n}\r\n.popup {\r\n    display: none;\r\n    position: absolute;\r\n    left: 17rem;\r\n    bottom: 1.3rem;\r\n    width: 100px;\r\n    height: 40px;\r\n    background-color: #727887;\r\n    z-index: 1000;\r\n}\r\n.projectButton {\r\n    width: 100%;\r\n}\r\n.onetwo {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.title {\r\n    font-size: 30px;\r\n}\r\n.resetflex {\r\n    height: 2rem;\r\n    display: flex;\r\n    justify-content: start;\r\n}\r\n#resetLocalStorage {\r\n    \r\n}\r\n.mainpage {\r\n    display: flex;\r\n    justify-content: center;\r\n    height: 100%;\r\n    width: 85%;\r\n    background-color: #37476F;\r\n}\r\n\r\n.mainpagecontainer {\r\n    display:flex;\r\n    flex-direction: column;\r\n    width: 50%;\r\n    height: 100%;\r\n    background-color: #37476F;\r\n}\r\n.formContainer {\r\n    width: 100%;\r\n    height: 20%;\r\n}\r\n.taskform {\r\n    height: 100%;\r\n    width: 100%;\r\n    background-color: #53689B;\r\n}\r\n.button {\r\n    height: 1.5rem;\r\n    width: 6rem;\r\n    background-color: #2D3B5C;\r\n    border: 0;\r\n    border-radius: 2px;\r\n}\r\n.submitButton {\r\n    color: white;\r\n    background-color: orangered;\r\n}\r\n.hihi {\r\n    margin-top: 2rem;\r\n    margin-bottom: 1rem;\r\n}\r\n#projectname {\r\n    color: white;\r\n    font-size: 20px;\r\n}\r\n.taskbutton {\r\n    background-color: #37476F;\r\n    color: white;\r\n    border: 0;\r\n}\r\n.line {\r\n    width: 100%;\r\n    height: 1px;\r\n    background-color: white;\r\n\r\n}\r\n.task {\r\n    display: flex;\r\n    width: 100%;\r\n}\r\n.markdone {\r\n    height: 20px;\r\n    width: 20px;\r\n    border-radius: 50%;\r\n    background-color: aqua;\r\n    margin-top: .5rem;\r\n\r\n}\r\n.things {\r\n    margin-left: .7rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 4rem;\r\n    width: 100%;\r\n    margin-top: .5rem;\r\n    margin-bottom: .5rem;\r\n    background-color:#37476F;\r\n    color: white;\r\n}\r\n'],sourceRoot:""}]);const c=a},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var A=this[c][0];null!=A&&(a[A]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},973:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],c=0;c<e.length;c++){var A=e[c],l=r.base?A[0]+r.base:A[0],d=i[l]||0,s="".concat(l," ").concat(d);i[l]=d+1;var u=t(s),m={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==u)n[u].references++,n[u].updater(m);else{var p=o(m,r);r.byIndex=c,n.splice(c,0,{identifier:s,updater:p,references:1})}a.push(s)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=t(i[a]);n[c].references--}for(var A=r(e,o),l=0;l<i.length;l++){var d=t(i[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=A}}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.nc=void 0,(()=>{var e=t(72),n=t.n(e),r=t(825),o=t.n(r),i=t(659),a=t.n(i),c=t(56),A=t.n(c),l=t(540),d=t.n(l),s=t(113),u=t.n(s),m=t(365),p={};p.styleTagTransform=u(),p.setAttributes=A(),p.insert=a().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=d(),n()(m.A,p),m.A&&m.A.locals&&m.A.locals;let f=[];function h(e){return function(e,n){return e instanceof Date?new e.constructor(n):new Date(n)}(e,Date.now())}function C(e){const n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new e.constructor(+e):"number"==typeof e||"[object Number]"===n||"string"==typeof e||"[object String]"===n?new Date(e):new Date(NaN)}function g(e){const n=C(e);return n.setHours(0,0,0,0),n}function B(e){return n=e,t=h(e),+g(n)==+g(t);var n,t}Math.pow(10,8);const I=6e4,y=36e5;function b(e,n){const t=n?.additionalDigits??2,r=function(e){const n={},t=e.split(v.dateTimeDelimiter);let r;if(t.length>2)return n;if(/:/.test(t[0])?r=t[0]:(n.date=t[0],r=t[1],v.timeZoneDelimiter.test(n.date)&&(n.date=e.split(v.timeZoneDelimiter)[0],r=e.substr(n.date.length,e.length))),r){const e=v.timezone.exec(r);e?(n.time=r.replace(e[1],""),n.timezone=e[1]):n.time=r}return n}(e);let o;if(r.date){const e=function(e,n){const t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+n)+"})|(\\d{2}|[+-]\\d{"+(2+n)+"})$)"),r=e.match(t);if(!r)return{year:NaN,restDateString:""};const o=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:null===i?o:100*i,restDateString:e.slice((r[1]||r[2]).length)}}(r.date,t);o=function(e,n){if(null===n)return new Date(NaN);const t=e.match(x);if(!t)return new Date(NaN);const r=!!t[4],o=j(t[1]),i=j(t[2])-1,a=j(t[3]),c=j(t[4]),A=j(t[5])-1;if(r)return function(e,n,t){return n>=1&&n<=53&&t>=0&&t<=6}(0,c,A)?function(e,n,t){const r=new Date(0);r.setUTCFullYear(e,0,4);const o=7*(n-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(n,c,A):new Date(NaN);{const e=new Date(0);return function(e,n,t){return n>=0&&n<=11&&t>=1&&t<=(S[n]||(E(e)?29:28))}(n,i,a)&&function(e,n){return n>=1&&n<=(E(e)?366:365)}(n,o)?(e.setUTCFullYear(n,i,Math.max(o,a)),e):new Date(NaN)}}(e.restDateString,e.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);const i=o.getTime();let a,c=0;if(r.time&&(c=function(e){const n=e.match(k);if(!n)return NaN;const t=L(n[1]),r=L(n[2]),o=L(n[3]);return function(e,n,t){return 24===e?0===n&&0===t:t>=0&&t<60&&n>=0&&n<60&&e>=0&&e<25}(t,r,o)?t*y+r*I+1e3*o:NaN}(r.time),isNaN(c)))return new Date(NaN);if(!r.timezone){const e=new Date(i+c),n=new Date(0);return n.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),n.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),n}return a=function(e){if("Z"===e)return 0;const n=e.match(w);if(!n)return 0;const t="+"===n[1]?-1:1,r=parseInt(n[2]),o=n[3]&&parseInt(n[3])||0;return function(e,n){return n>=0&&n<=59}(0,o)?t*(r*y+o*I):NaN}(r.timezone),isNaN(a)?new Date(NaN):new Date(i+c+a)}const v={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},x=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,k=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,w=/^([+-])(\d{2})(?::?(\d{2}))?$/;function j(e){return e?parseInt(e):1}function L(e){return e&&parseFloat(e.replace(",","."))||0}const S=[31,null,31,30,31,30,31,31,30,31,30,31];function E(e){return e%400==0||e%4==0&&e%100!=0}function T(e,n){return+C(e)<+C(n)}function D(){return ne.filter((e=>B(b(e.dueDate))))}function Y(){const e=new Date;return ne.filter((n=>T(b(n.dueDate),e)&&!B(b(n.dueDate))))}let q=!1,N=!1;function M(){q=!0,N=!1;const e=D(),n=document.querySelector(".taskcontainer");n.innerHTML="",document.querySelector("#projectname").innerHTML="Today",e.forEach((e=>{const t=document.createElement("div");t.classList.add("task"),t.innerHTML=`\n            <div class="markdone"></div>\n            <div class="things">\n                <div class="taskname">${e.title}</div>\n                <div class="description">${e.description}</div>\n                <div class="date">${e.dueDate}</div>\n            </div>\n        `,n.appendChild(t),t.querySelector(".markdone").addEventListener("click",(()=>{return n=e.title,t=e.dueDate,ne=ne.filter((e=>!(e.title===n&&e.dueDate===t))),Z(),M(),z(),F(),ee(),void R();var n,t}));var r=document.createElement("div");r.classList.add("line"),n.appendChild(r)}))}function W(){N=!0;const e=Y(),n=new Date,t=document.querySelector(".taskcontainer");t.innerHTML="",document.querySelector("#projectname").innerHTML="Overdue",e.forEach((e=>{const r=b(e.dueDate);if(T(r,n)&&!B(r)){const n=document.createElement("div");n.classList.add("task"),n.innerHTML=`\n                <div class="markdone"></div>\n                <div class="things">\n                    <div class="taskname">${e.title}</div>\n                    <div class="description">${e.description}</div>\n                    <div class="date">${e.dueDate}</div>\n                </div>\n            `,t.appendChild(n),n.querySelector(".markdone").addEventListener("click",(()=>function(e,n){for(let t=0;t<ne.length;t++)if(ne[t].title===e&&ne[t].dueDate===n){ne.splice(t,1);break}for(let t=0;t<f.length;t++)for(let r=0;r<f[t].todoList.length;r++)if(f[t].todoList[r].title===e&&f[t].todoList[r].dueDate===n){f[t].todoList.splice(r,1);break}Z(),W(),F(),ee(),R()}(e.title,e.dueDate)))}}));var r=document.createElement("div");r.classList.add("line"),t.appendChild(r)}function z(){document.querySelector("#todaynumber").innerHTML=D().length}function F(){document.querySelector("#overduenumber").innerHTML=Y().length}function Z(){localStorage.setItem("projects",JSON.stringify(f)),localStorage.setItem("allTodo",JSON.stringify(ne))}const H=t.p+"637824bc8f2833004ccc.svg",U=t.p+"469afb7a3c40cc9d6606.svg";let $=!0,P=0;function O(){X(),$=!0,q=!1,N=!1,document.querySelector("#projectname").innerHTML="All Tasks";for(let r=0;r<ne.length;r++){let o,i=!1,a=ne[r].title,c=ne[r].description,A=ne[r].dueDate;null!=ne[r].projectName&&(o=ne[r].projectName,i=!0);let l=document.querySelector(".taskcontainer");var e=document.createElement("div");e.classList.add("task"),e.setAttribute("data-project-index",r),e.innerHTML=`\n            <div class="markdone pointer"></div>\n            <div class="things">\n                <div class="taskname">${a}</div>\n                <div class="description">${c}</div>\n                <div class="date">${A}</div>\n            </div>\n        `,l.appendChild(e);let d=e.querySelector(".things");if(i){var n=document.createElement("div");n.innerHTML=o,n.classList.add("projectName"),d.appendChild(n)}e.querySelector(".markdone").addEventListener("click",(()=>G(a,r)));var t=document.createElement("div");t.classList.add("line"),l.appendChild(t)}}function X(){document.querySelector(".taskcontainer").innerHTML=""}function R(){document.querySelector(".myprojects").innerHTML="";for(let e=0;e<f.length;e++){let n=f[e].todoList.length,t=f[e].name,r=document.querySelector(".myprojects"),o=document.createElement("div");o.classList.add("one"),o.classList.add("project"),o.classList.add("hoverback"),o.classList.add("pointer"),o.setAttribute("data-project-index",e),o.innerHTML=`\n            <div class="picflex2">\n                <div class="text weird">\n                </div>\n                <div class="text wt lt">${t}</div>\n            </div>\n            <div class="number numberflex">${n}</div>\n            <div class="hover">\n\n            </div>\n            <div class="popup">\n                <button class="projectButton" id="deleteP">Delete</button>\n                <button class="projectButton" id="renameP">Rename</button>\n            </div>\n        `,r.appendChild(o);let i=document.createElement("img");i.src=H,i.classList.add("pic2"),o.querySelector(".weird").appendChild(i);const a=o.querySelector(".hover");let c=document.createElement("img");c.src=U,a.appendChild(c),J(a,o.querySelector(".popup")),o.addEventListener("click",(()=>K(e)));const A=o.querySelector("#deleteP"),l=o.querySelector("#renameP");A.addEventListener("click",(()=>V(e))),l.addEventListener("click",(()=>_(e)))}}function J(e,n){e.addEventListener("click",(e=>{e.stopPropagation(),document.querySelectorAll(".popup").forEach((e=>{e.style.display="none"})),n.style.display="block"})),document.addEventListener("click",(t=>{n.contains(t.target)||e.contains(t.target)||(n.style.display="none")}))}function V(e){let n=f.splice(e,1)[0];for(let e=0;e<n.todoList.length;e++){let t=n.todoList[e].title,r=n.name;for(let e=0;e<ne.length;e++)if(t===ne[e].title&&r===ne[e].projectName){ne.splice(e,1);break}}Z(),ee(),z(),F(),O(),R()}function _(e){const n=prompt("Enter the new project name:");n&&(f[e].name=n,R())}function G(e,n){if(null!=ne[n].projectName){let t=ne[n].projectName;for(let n=0;n<f.length;n++)if(f[n].name===t)for(let t=0;t<f[n].todoList.length;t++)f[n].todoList[t].title===e&&f[n].todoList.splice(t,1)}ne.splice(n,1),Z(),ee(),z(),F(),O(),R()}function K(e){if($=!1,q=!1,e<0||e>=f.length)return;P=e;let n=f[e];X(),document.querySelector("#projectname").innerHTML=n.name;for(let e=0;e<n.todoList.length;e++){let o=n.name,i=n.todoList[e].title,a=n.todoList[e].description,c=n.todoList[e].dueDate,A=document.querySelector(".taskcontainer");var t=document.createElement("div");t.classList.add("task"),t.setAttribute("data-task-index",e),t.innerHTML=`\n            <div class="markdone"></div>\n            <div class="things">\n                <div class="taskname">${i}</div>\n                <div class="description">${a}</div>\n                <div class="date">${c}</div>\n            </div>\n        `,A.appendChild(t),t.querySelector(".things"),t.querySelector(".markdone").addEventListener("click",(()=>Q(o,e)));var r=document.createElement("div");r.classList.add("line"),A.appendChild(r)}}function Q(e,n){for(let t=0;t<f.length;t++)if(e===f[t].name){let e=f[t].todoList.splice(n,1)[0];for(let n=0;n<ne.length;n++)if(e&&e.title===ne[n].title){ne.splice(n,1);break}K(t)}Z(),ee(),z(),F(),R()}function ee(){document.querySelector("#alltasknumber").innerHTML=ne.length}let ne=[];let te=!0;function re(){te=!te}function oe(){if(te){var e=document.createElement("form");e.classList.add("taskform"),e.innerHTML='\n        <label for="name"></label>\n        <input type="text" id="name" name="name" placeholder="Task name (required)" required autocomplete="off"><br>\n\n        <label for="date"></label>\n        <input type="date" id="date" name="date" required autocomplete="off"><br>\n\n        <label for="projects"></label>\n        <select name="projects" id="projects" autocomplete="off">\n            <option value="saumyazaumya">Tasks</option>\n        </select>\n\n        <label for="descrip"></label>\n        <input type="text" id="descrip" name="descrip" placeholder="Notes (optional)" autocomplete="off" maxlength="20">\n\n        <button type="button" class="button close pointer">Close</button>\n        <button type="submit" class="button submitButton pointer">Submit</button>\n        ',document.querySelector(".onetwo").appendChild(e);for(let e=0;e<f.length;e++){let n=f[e].name,t=document.getElementById("projects"),r=document.createElement("option");r.value=n,r.textContent=n,t.appendChild(r)}re(),document.querySelector(".taskform").addEventListener("submit",(e=>{e.preventDefault();let n=!0,t=null;const r=document.getElementById("name").value,o=document.getElementById("date").value;let i=document.getElementById("projects").value;"saumyazaumya"===i&&(i=null);const a=document.getElementById("descrip").value;for(let e=0;e<f.length;e++)if(i===f[e].name){t=f[e];for(let o=0;o<t.todoList.length;o++)r===t.todoList[e].title&&(n=!1);break}for(let e=0;e<ne.length;e++)null===ne[e].projectName&&r===ne[e].title&&(n=!1);if(n){let e=function(e,n,t,r){const o={title:e,description:n,dueDate:t,complete:!1,projectName:r,markComplete:function(){this.complete=!0},changePriority:function(e){this.priority=e}};for(let e=0;e<f.length;e++)f[e].name===r&&f[e].addTodo(o);return o}(r,a,o,i);ne.push(e),Z()}document.querySelector(".taskform").reset(),ie(),R(),ee(),z(),F(),q?M():N?W():$?O():K(P)}),{once:!0}),document.querySelector(".close").addEventListener("click",ie)}}function ie(){if(!te){var e=document.querySelector(".taskform");document.querySelector(".onetwo").removeChild(e),e.innerHTML="",e.classList.remove("taskform"),re()}}let ae=!0;function ce(){ae=!ae}function Ae(){if(ae){var e=document.createElement("form");e.classList.add("projectForm"),e.innerHTML='\n        <div class = "text">\n            <button type="button" class="closeProject pointer">X</button>\n        </div>\n        <label for="name"></label>\n        <input type="text" id="name" class = "projectbox" name="name" placeholder="Project name + [Enter]" required autocomplete="off">\n        <button type="submit" style="display:none"></button>\n        ',document.querySelector(".poop").appendChild(e),ce(),document.querySelector(".projectForm").addEventListener("submit",(e=>{e.preventDefault();let n=!0;const t=document.getElementById("name").value;for(let e=0;e<f.length;e++)f[e].name===t&&(n=!1);if(n){let e=function(e){const n=[];let t;for(let n=0;n<f.length;n++)if(f[n].name===e)return null;return t=e,{todoList:n,name:t,addTodo:function(e){n.push(e)},removeTodo:function(e){for(let t=0;t<n.length;t++)n[t].name===e&&n.splice(t,1)}}}(t);f.push(e),Z()}document.querySelector(".projectForm").reset(),le(),R()}),{once:!0}),document.querySelector(".closeProject").addEventListener("click",le)}}function le(){if(!ae){var e=document.querySelector(".projectForm");document.querySelector(".poop").removeChild(e),e.innerHTML="",e.classList.remove("projectForm"),ce()}}document.addEventListener("DOMContentLoaded",(function(){!function(){const e=localStorage.getItem("projects"),n=localStorage.getItem("allTodo");e&&(f=JSON.parse(e)),n&&(ne=JSON.parse(n))}(),document.querySelector(".taskbutton").addEventListener("click",oe),document.querySelector(".create").addEventListener("click",Ae),document.querySelector(".alltasks").addEventListener("click",O),document.querySelector(".today").addEventListener("click",M),document.querySelector(".overdue").addEventListener("click",W),R(),O(),ee(),z(),F(),function(){const e=document.querySelectorAll(".hoverback");let n=null;e.forEach((e=>{e.addEventListener("click",(()=>{n&&(n.style.backgroundColor=""),e.style.backgroundColor="#93A3CA",n=e}))}))}(),document.getElementById("resetLocalStorage").addEventListener("click",(()=>{localStorage.clear(),f=[],ne=[],R(),O(),ee(),z(),F()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,